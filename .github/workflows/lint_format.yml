name: Lint and Format

on: [push, pull_request]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black isort

    - name: Run lint and format checks
      run: |
        pylint $(git ls-files '*.py')
        black .
        isort .

    - name: Commit and push changes
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        git diff-index --quiet HEAD || git commit -m "Auto-fix linter and formatter issues"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Annotate pylint issues
      if: always()
      run: |
        pylint $(git ls-files '*.py') --output-format=json > pylint-report.json
        python3 -c "
import json

def create_annotations(report):
    annotations = []
    for item in report:
        path = item['path']
        line = item['line']
        message = item['message']
        annotations.append(f'::warning file={path},line={line}::{message}')
    return annotations

with open('pylint-report.json') as f:
    report = json.load(f)
    annotations = create_annotations(report)
    for annotation in annotations:
        print(annotation)
"
