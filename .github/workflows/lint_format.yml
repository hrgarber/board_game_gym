name: Lint and Format

on: [push, pull_request]

permissions:
  contents: write

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black isort

    - name: Run pylint
      run: |
        pylint $(git ls-files '*.py') --output-format=parseable --exit-zero > pylint-report.txt

    - name: Annotate pylint issues
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('pylint-report.txt', 'utf8');
          const lines = report.split('\n');
          for (const line of lines) {
            const match = line.match(/^(.+):(\d+):(\d+): \[(.)\d+\((.+)\), .+\] (.+)$/);
            if (match) {
              const [, file, lineNum, col, severity, code, message] = match;
              const level = severity === 'E' ? 'error' : 'warning';
              core.info(`${file}:${lineNum}:${col} [${code}] ${message}`);
              core.annotate({
                title: `Pylint [${code}]`,
                file,
                startLine: parseInt(lineNum),
                endLine: parseInt(lineNum),
                startColumn: parseInt(col),
                endColumn: parseInt(col),
                annotationLevel: level,
                message: message
              });
            }
          }

    - name: Check for linting errors
      run: |
        if grep -q "^.*:[0-9]\+:[0-9]\+: \[E" pylint-report.txt; then
          echo "Linting errors found. Please fix them before proceeding."
          exit 1
        fi

    - name: Run black check
      run: black --check --exclude "\.ipynb$" .

    - name: Run isort
      run: isort --check-only --diff .

    - name: Run black formatting
      run: black .

    - name: Run isort
      run: isort .

    - name: Check for changes
      id: git-check
      run: |
        git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      if: steps.git-check.outputs.changes == 'true' && (github.event_name == 'pull_request' || github.event_name == 'push')
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        git commit -m "Auto-fix formatter issues"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
